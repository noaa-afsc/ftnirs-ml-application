---
title: Contributing Application features
---

The Dash Application codebase can be modified to add features to the application experience without modifying the core ML processes. Such features might include: 

1. How data are managed and/or presented in the standard workflow
2. Additional visual feedback
3. Handling of edge cases
4. Descriptive, explicit assertations, warnings, errors to help guide users and prevent misuse or bad ML outcomes. 

The application codebase is in the following repo, in the AFSC/Age and Growth Github Enterprise 

https://github.com/noaa-afsc/ftnirs-mlapp

The application is a 'multipage' dash app, despite it functionally being a one page app (originally, a help page was planned prior to deciding to put the documentation on github). This design means that the relevant code is roughly organized as follows: 

.
└── app/
    ├── app.py
    ├── app_constant.py
    └── pages/
        └── home.py

* App.py: Responsible for high level app configuration, app routing, app boilerplate, and certain features of the application that cannot be declared at the page level (interact with the Dash 'app' object available here. 

* app_constant.py: Responsible for content that will persist between pages like the top bar. 

* home.py: Contains core app features and ML logic.

Changes to the application features will generally take place in the home.py file. Adding additional pages is possible. For instance, a signal analyzer could be added, or a more sophisticated data viewing/editing page. These would go under home.py, and you would want to ensure some navigation was possible to and from the homepage. 

Adding features or fixing bugs in the Dash frontend will require some python experience, and familiarity with frontend software concepts is helpful. 
